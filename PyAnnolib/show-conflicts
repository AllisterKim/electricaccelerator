#!/usr/bin/python
"""
Show the conflicts in a build.
"""

import argparse
from pyannolib import annolib

# Key = job id, Value = Job record
jobs = {}

# The jobs that created a conflict
conflict_jobs = []

def run(filename):

    build = annolib.AnnotatedBuild(filename)

    # Collect all the jobs in a hash, and look for conflict jobs
    def job_cb(job):
        jobs[job.getID()] = job

        if job.getStatus() == annolib.JOB_STATUS_CONFLICT:
            conflict_jobs.append(job)

    build.parseJobs(job_cb)

    # Simple summary
    print "Total number of jobs:", len(jobs.keys())
    print "Total number of conflicts:", len(conflict_jobs)


    # Report each conflict
    for i, conflict_job in enumerate(conflict_jobs):
        print "=" * 80
        print
        print "Conflict #%d" % (i+1,)
        print
        conflict = conflict_job.getConflict()
        filename = conflict.getFile()
        print "Conflict file:", filename

        print
        print "Conflicting job:", conflict_job.getID()
        print "-----------------" + "-" * len(conflict_job.getID())
        show_job(conflict_job)
        print

        write_job = jobs[conflict.getWriteJob()]
        print "Written by:", write_job.getID()
        print "------------" + "-" * len(write_job.getID())
        show_job(write_job)

        rerun_job = jobs[conflict.getRerunBy()]
        print "Rerun by:", rerun_job.getID()
        print "----------" + "-" * len(rerun_job.getID())
        show_job(rerun_job)

    print "=" * 80

def show_job(job):
    # Print a rule job
    if job.getType() == annolib.JOB_TYPE_RULE:
        print "Target:", job.getName()
        timing = job.getTiming()
        print "Invoked:", timing.getInvoked(),
        print "Completed:", timing.getCompleted()
        print "Makefile:", job.getFile(), "line:", job.getLine()
        commands = job.getCommands()
        if commands:
            print "ARGV:"
            for command in commands:
                print command.getArgv()

    # Print a parse job
    elif job.getType() == annolib.JOB_TYPE_PARSE:
        outputs = job.getOutputs()
        if outputs:
            print "Parse job output:"
            for output in outputs:
                print output.getText()
        else:
            print "Parse job (no output)"

        # Key = optype, value = file
        operations = {}
        for op in job.getOperations():
            oplist = operations.setdefault(op.getType(), [])
            oplist.append( op.getFile() )

        if operations:
            print "File operations:"
            for optype, files in operations.items():
                print "\t", optype, ":", len(files)

    print


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("annotation_file")

    options = parser.parse_args()

    run(options.annotation_file)

if __name__ == "__main__":
    main()
