#!/usr/bin/env python
"""
Report on the parallelism seen in the build.
"""
#import time
import sys
import argparse

from pyannolib import annolib
from pyannolib import sequencing

def run(filename):

    cluster = sequencing.Cluster()
#    print "Collating Jobs", time.ctime()
    try:
        build = annolib.AnnotatedBuild(filename)
        
        # Collect all the jobs in a hash, and look for conflict jobs
        def job_cb(job, cluster):
            timings = job.getTimings()
            for timing in timings:
                cluster.addTiming(timing)

        build.parseJobs(job_cb, cluster)

    except annolib.PyAnnolibError, e:
        sys.exit(e)

#    print "Merging Overlaps", time.ctime()
    cluster.mergeOverlaps()

#    print "Calculating Histogram", time.ctime()
    concurrency = cluster.calculateHistogram()

#    print "Finished, now reporting", time.ctime()

    tot_time = 0.0
    for N_time in concurrency.values():
        tot_time += N_time

    print
    print "Parallelism Histogram for:"
    print filename
    print
    print "AGENTS       TIME PERCENT"

    discrete_Ns = concurrency.keys()
    discrete_Ns.sort()
    for N in discrete_Ns:
        N_time = concurrency[N]
        pct = 100.0 * N_time / tot_time
        print "%3d: %012s %5.1f %%" % (N, sequencing.hms(N_time), pct)

    print
    print "TOTAL TIME:", sequencing.hms(tot_time)

def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("annotation_file")

    args = parser.parse_args()

    run(args.annotation_file)

if __name__ == "__main__":
    main()
