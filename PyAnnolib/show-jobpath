#!/usr/bin/python
"""
Show the jobpath for any given target.
"""

import argparse
from pyannolib import annolib

# All jobs
jobs = []

def run(filename, targets):

    build = annolib.AnnotatedBuild(filename)

    global jobs
    jobs = build.getAllJobs()

    for target in targets:
        show_jobpath(target) 


def find_job_for_target(target):
    for job in jobs:
        if job.getName() == target:
            return job
    else:
        return None

def find_job_by_id(ID):
    for job in jobs:
        if job.getID() == ID:
            return job
    else:
        return None

def show_jobpath(target):
    path = []

    job = find_job_for_target(target)
    if not job:
        print "Could not find job for:", target
    path.append(job)

    while 1:
        make = job.getMakeProcess()
        path.append(make)

        job_id = make.getParentJobID()
        if job_id:
            job = find_job_by_id(job_id)
            if job:
                path.append(job)
            else:
                break
        else:
            break

    path.reverse()
    for item in path:
        if isinstance(item, annolib.MakeProcess):
            show_make(item)
        elif isinstance(item, annolib.Job):
            show_job(job)
        else:
            assert 0

def show_make(make_proc):

    print "Make Process, Level=%s, ID=%s" % (make_proc.getLevel(),
            make_proc.getID())
    print "\tCWD=", make_proc.getCWD()
    print make_proc.getCmd()
    print

def show_job(job):
    print "Job ID=%s" % (job.getID(),)
    # Print a rule job
    if job.getType() == annolib.JOB_TYPE_RULE:
        print "Target:", job.getName()
        timing = job.getTiming()
        print "Invoked:", timing.getInvoked(),
        print "Completed:", timing.getCompleted()
        print "Makefile:", job.getFile(), "line:", job.getLine()
        commands = job.getCommands()
        if commands:
            print "ARGV:"
            for command in commands:
                print command.getArgv()

    else:
        print "Non-rule type of job"
    
    print


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("annotation_file")
    parser.add_argument("targets", nargs="+")

    options = parser.parse_args()

    run(options.annotation_file, options.targets)

if __name__ == "__main__":
    main()
