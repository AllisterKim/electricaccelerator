import java.io.Writer;
import java.util.concurrent.atomic.AtomicInteger;

Clock gUniversalTime = new org.gradle.util.Clock();
String gFileName = "gradle.anno";

BufferedWriter gWriter;
try{
	gWriter = new BufferedWriter(new FileWriter(gFileName));
	// Generic preamble data to annotation - should not be significant
	gWriter.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
	gWriter.write("<!DOCTYPE build SYSTEM \"build.dtd\">\n");
	gWriter.write("<build id=\"1\" cm=\"\" start=\"\">\n");
	gWriter.write("<properties>\n<property name=\"AnnoDetail\">basic,file,history,waiting</property>\n</properties>\n");
	gWriter.write("<make level=\"0\" cmd=\"\" cwd=\"\" mode=\"Generated Gradle Annotation\">\n");	
	gWriter.flush();
}catch(Exception ex){
	ex.printStackTrace();
}

class ExecutionListener 
implements 	TaskExecutionListener, BuildListener, 
			TaskExecutionGraphListener, ProjectEvaluationListener, TaskActionListener 
{
	private final int BUSY_THREAD = -2;
	private AtomicInteger iIdAtomicCounter = new AtomicInteger(0);
	private Clock iUniversalTime;
	private BufferedWriter iWriter;
    private BufferedWriter iOutputWriter;
    private HashMap<Task, Long> iTaskTimestamps;
    private HashMap<Task, OutputListener> iTaskLogs;
    private HashMap<Task, Integer> iTaskThreads;
    private HashMap<String, Integer> iTestThreads;
    private HashMap<Task, Integer> iTaskIds;
    private HashMap<Project, Long> iProjectTimestamps;
	private HashMap<Task, ArrayList<Integer>> iTaskDependencyLists;
    private ArrayList<Long> iGradleThreads;
    private ArrayList<Integer> iProjectEvalIds;
   	private Object iThreadLock = new Object();
    private Object iWriteLock = new Object();
    private Object iIdLock = new Object();
    private long iLastEventCompletion = 0;
    private int iGraphPopulatedJobId;
    private int iProjectsLoadedJobId;

	public ExecutionListener(Clock aUniversalTime, BufferedWriter aWriter){
		iUniversalTime = aUniversalTime;
		iWriter = aWriter;
		iLastEventCompletion = iUniversalTime.timeInMs;
		iTaskTimestamps = Collections.synchronizedMap(new HashMap<Task, Long>());
		iTaskLogs = Collections.synchronizedMap(new HashMap<Task, OutputListener>());
		iTaskThreads = Collections.synchronizedMap(new HashMap<Task, Integer>());
		iTestThreads = Collections.synchronizedMap(new HashMap<String, Integer>());
		iTaskIds = Collections.synchronizedMap(new HashMap<Task, Integer>());
		iTaskDependencyLists = Collections.synchronizedMap(new HashMap<Task, ArrayList<Integer>>());
		iProjectTimestamps = Collections.synchronizedMap(new HashMap<Project, Long>());
		iProjectEvalIds = new ArrayList<Integer>();
		iGradleThreads = new ArrayList<Long>();
		iGradleThreads.add(-1);
		generateJob(0, iLastEventCompletion, "parse", "Annotation Listener Instantiated", true);
	}

	private class AnnoTestListener implements TestListener {

		private BufferedWriter iWriter;
		private Test iTest;
	    private HashMap<TestDescriptor, Long> iTestDescriptorTimestamps;
	    private HashMap<TestDescriptor, Integer> iTestDescriptorJobIds;
    	private HashMap<TestDescriptor, ArrayList<Integer>> iTestDescriptorDependencyLists;
    	private ArrayList<TestDescriptor> iBeforeSuiteJobNotExists;
	    private boolean iIsParallelTest;
				
		public AnnoTestListener(BufferedWriter aWriter, Test aTest){
			iWriter = aWriter;
			iTest = aTest;
			iTestDescriptorTimestamps = Collections.synchronizedMap(new HashMap<TestDescriptor, Long>());
			iTestDescriptorJobIds = Collections.synchronizedMap(new HashMap<TestDescriptor, Integer>());
			iTestDescriptorDependencyLists = Collections.synchronizedMap(new HashMap<TestDescriptor, ArrayList<Integer>>());
			iBeforeSuiteJobNotExists = Collections.synchronizedList(new ArrayList<TestDescriptor>());
			iIsParallelTest = iTest.getMaxParallelForks()>1;
		}
				
		@Override
		void beforeSuite(TestDescriptor suite){
			long ts = iUniversalTime.timeInMs+1;
			iTestDescriptorTimestamps.put(suite, ts);
			iTestDescriptorJobIds.put(suite, getNextJobId());
			iBeforeSuiteJobNotExists.add(suite);
			iTestDescriptorDependencyLists.put(suite, new ArrayList<Integer>());
			findParentSuite(suite, true);
		}

		@Override
		void beforeTest(TestDescriptor testDescriptor){
			long ts = iUniversalTime.timeInMs+1;
			iTestDescriptorTimestamps.put(testDescriptor, ts);
			iTestDescriptorJobIds.put(testDescriptor, getNextJobId());
			acquireThread(testDescriptor.toString(), ts);
			findParentSuite(testDescriptor, true);
		}

		@Override
		void afterTest(TestDescriptor testDescriptor, TestResult result){
			long invoked = iTestDescriptorTimestamps.get(testDescriptor);
		    long completed = iUniversalTime.timeInMs;
		    int currentJobId = iTestDescriptorJobIds.get(testDescriptor);
		    String name = iTest.getPath()+": "+testDescriptor.getName()+".so";
		    String depList = "";
			TestDescriptor parent = findParentSuite(testDescriptor, false);
			if(parent){
				depList += generateDepList(iTestDescriptorJobIds.get(parent));
				iTestDescriptorTimestamps.put(parent, completed+1);
				iTestDescriptorDependencyLists.get(parent).add(iTestDescriptorJobIds.get(testDescriptor));
			}
			generateJob(invoked, completed, "rule", name, false, currentJobId, releaseThread(testDescriptor.toString(), completed), depList, "", "", generateTestCommandFailedAnno(testDescriptor, result));
			iTestDescriptorTimestamps.remove(testDescriptor);	
		}

		@Override
		void afterSuite(TestDescriptor suite, TestResult result){
			long invoked = iTestDescriptorTimestamps.get(suite);
			long completed = iUniversalTime.timeInMs;
			String name = iTest.getPath()+": "+suite.getName()+": After Suite";
			int currentJobId = getNextJobId();
			int thread = (iIsParallelTest)?(getThread(invoked, completed)):(getThread(iTest));
			generateMiscJob(invoked, completed, name, false, currentJobId, thread, generateDepList(iTestDescriptorDependencyLists.get(suite)), "", "", generateTestCommandFailedAnno(suite, result));
			TestDescriptor parent = findParentSuite(suite, false);
			if(parent){
				iTestDescriptorTimestamps.put(parent, completed+1);
				iTestDescriptorDependencyLists.get(parent).add(currentJobId);
			}
			// do below in case we are the top-most parent suite
			iTaskDependencyLists.get(iTest).clear();
			iTaskDependencyLists.get(iTest).add(currentJobId);
			iTaskTimestamps.put(iTest, completed+1);
		}
		
		private TestDescriptor findParentSuite(TestDescriptor aTestDescriptor, Boolean aGenerateAnno){
			while(aTestDescriptor.getParent() != null){
				TestDescriptor td = aTestDescriptor.getParent();
				if(iTestDescriptorJobIds.containsKey(td)){
					if(aGenerateAnno && iBeforeSuiteJobNotExists.contains(td)){
						long invoked = iTestDescriptorTimestamps.get(td);
						long completed = iUniversalTime.timeInMs;
						String name = iTest.getPath()+": "+td.getName()+": Before Suite";
						int thread = (iIsParallelTest)?(getThread(invoked, completed)):(getThread(iTest));
						TestDescriptor parent = findParentSuite(td, false);
						int parentId = (parent) ? iTestDescriptorJobIds.get(parent) : iTaskDependencyLists.get(iTest).get(0);
						generateMiscJob(invoked, completed, name, false, iTestDescriptorJobIds.get(td), thread, generateDepList(parentId));
				        iBeforeSuiteJobNotExists.remove(td);
					}
			        return td;
				}
				aTestDescriptor = td;
			}
			return null;
		}
		
		private String generateTestCommandFailedAnno(TestDescriptor aTestDescriptor, TestResult aTestResult){
			String anno = "<command line=\"1\">\n";
			anno += "<argv>echo</argv>\n";
			anno += "<output src=\"prog\">"+iTest.toString()+": "+aTestDescriptor.toString()+"\n";
			anno += "Result: "+aTestResult.getResultType()+"\n\n";
			anno += "Total tests: "+aTestResult.getTestCount()+"\n";
			anno += "  Successful tests: "+aTestResult.getSuccessfulTestCount()+"\n";
			anno += "  Skipped tests: "+aTestResult.getSkippedTestCount()+"\n";
			anno += "  Failed tests: "+aTestResult.getFailedTestCount()+"\n";
			List<Throwable> exceptions = aTestResult.getExceptions();
			if(exceptions.size()>0){
				anno += "\nExceptions:\n";
				for(Throwable t : exceptions){
					anno += "\n  "+t.toString()+"\n";				
				}
			}
			anno += "</output>\n</command>\n";
			if(aTestResult.getFailedTestCount() > 0){
				anno += "<failed code=\"1\"/>\n";
			}
			return anno;
		}

		private final String generateDepList(ArrayList<Integer> aDepArrayList){
			String anno = "";
			anno += "<depList>\n";
			for(int id : aDepArrayList){
				anno += "<dep writejob=\"J${id}\" file=\"J${id}\"/>\n";
			}
			anno += "</depList>\n";
			return anno;
		}

		private final void acquireThread(String aTestDescriptor, long aInvoked){
			synchronized(iThreadLock){
				if(iIsParallelTest){
					// there seems to be a bug (or odd/unexpected behaviour) in some 
					// test scenarios where skipped/repeated tests leads to the beforeTest 
					// callback being called without the test actually executing.
					// Workaround below to only allow for one test being "active" 
					// (i.e. owning a thread) at any given time
					if(iTestThreads.containsKey(aTestDescriptor)){
						releaseThread(aTestDescriptor, aInvoked-1);
					}
					iTestThreads.put(aTestDescriptor, acquireThread(aInvoked));
				}
			}
		}
		private final int releaseThread(String aTestDescriptor, long aCompleted){
			synchronized(iThreadLock){
				return (iIsParallelTest) ? releaseThread(iTestThreads.remove(aTestDescriptor), aCompleted) : getThread(iTest);
			}
		}
	}
	
	private class OutputListener implements StandardOutputListener {
        private StringWriter iWriter = new StringWriter();

	    @Override
        public void onOutput(CharSequence output) {
            iWriter.append(output);
        }
        public String getLog() {
            return iWriter.toString();
        }
	}

    @Override
    void beforeExecute(Task task) {
    	long ts = iUniversalTime.timeInMs+1;
		iTaskTimestamps.put(task, ts);
		acquireThread(task, ts);
		getJobIdSetIfNotExist(task);

		OutputListener logListener = new OutputListener();
		iTaskLogs.put(task, logListener); 
		task.getLogging().captureStandardOutput(LogLevel.INFO);
		task.getLogging().addStandardOutputListener(logListener);
		task.getLogging().captureStandardError(LogLevel.WARN);
		task.getLogging().addStandardErrorListener(logListener);
    }

    @Override
    void beforeActions(Task task) {
    	long ts = iUniversalTime.timeInMs;
    	int id = getAndSetJobId(task);
		generateMiscJob(iTaskTimestamps.get(task), ts, task.getPath()+": Before Actions", false, id, getThread(task), generateDepList(task));
		// we no longer need previous registered dependencies for this task, but want to keep current id
		iTaskDependencyLists.get(task).clear();
		iTaskDependencyLists.get(task).add(id);
		iTaskTimestamps.put(task, ts+1);
		if(task instanceof Test){
			task.addTestListener(new AnnoTestListener(iWriter, task));
			if(((Test)task).getMaxParallelForks()>1){
				releaseThread(task, ts);
			}
		}
    }

    @Override
    void afterActions(Task task) {
    	long invoked = iTaskTimestamps.get(task);
        long completed = iUniversalTime.timeInMs;
	    // a job can not have a 0 ms runtime
	    if(completed <= invoked){
	    	completed = invoked+1;
	    }
		iTaskTimestamps.put(task, completed+1);
        String name = task.getPath();
		int previousJobId = iTaskDependencyLists.get(task).get(0);
		int currentJobId = getAndSetJobId(task);
		iTaskDependencyLists.get(task).clear();
		iTaskDependencyLists.get(task).add(currentJobId);
		if(task instanceof Test){
			if(((Test)task).getMaxParallelForks()>1){
				acquireThread(task, invoked);
			}
			generateMiscJob(invoked, completed, name+": After Test", false, currentJobId, getThread(task), generateDepList(previousJobId), generateOpList(task));
    		return;
		}

        String cmd = "";
        String lcTaskPath = task.getPath().toLowerCase();
        if(lcTaskPath.contains("compile")){
        	name += ".class";
        }
        else if(lcTaskPath.contains("checkstyle")){
        	name += ".o";
        }
        else if(lcTaskPath.contains("codenarc")){
        	name += ".o";
        }
        else if(lcTaskPath.contains("findbugs")){
        	name += ".o";
        }
        else if(lcTaskPath.contains("jar")){
        	name += ".jar";
        }
        else if(lcTaskPath.contains("zip")){
        	name += ".zip";
        }
        else if(lcTaskPath.contains("javadoc")){
        	cmd += "bison";
        }
		generateJob(invoked, completed, "rule", name, false, currentJobId, getThread(task), generateDepList(previousJobId), generateOpList(task), "", generateTaskCommandFailedAnno(task, cmd));
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
    	long ts = iUniversalTime.timeInMs;
		int currentJobId = getJobId(task);
		if(taskState.getSkipped() || !taskState.getDidWork()){
			String name = task.getPath()+((taskState.getSkipped())?(": Skipped"):(": Did no work"));
			generateMiscJob(iTaskTimestamps.get(task), ts, name, false, currentJobId, releaseThread(task, ts), generateDepList(task), "", "", generateTaskCommandFailedAnno(task, ""));
		}
		else{
			generateMiscJob(iTaskTimestamps.get(task), ts, task.getPath()+": After Actions", false, currentJobId, releaseThread(task, ts), generateDepList(iTaskDependencyLists.get(task).get(0)));
		}
		iLastEventCompletion = ts+1;
        iTaskTimestamps.remove(task);
        iTaskLogs.remove(task);
    }

    @Override
    void buildFinished(BuildResult result) {
    	generateJob(iLastEventCompletion, iUniversalTime.timeInMs, "end", "Build Finished", false);
    	writeAnno("</make>\n</build>\n");
		iWriter.close();
    }

    @Override
    void buildStarted(Gradle gradle) {
		def tick = iUniversalTime.timeInMs;
		printf "${tick}: Starting Build\n";
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
    	long ts = iUniversalTime.timeInMs;
		String depList = "<depList>\n";
		for(int id : iProjectEvalIds){
			depList += "\t<dep writejob=\"J${id}\" file=\"J${id}\"/>\n";
		}
		depList += "</depList>\n";
		iProjectEvalIds.clear();
		generateMiscJob(iLastEventCompletion, ts, "Projects Evaluated", true, getNextJobId(), getThread(iLastEventCompletion, ts), depList);
    }

    @Override
    void projectsLoaded(Gradle gradle) {
    	iProjectsLoadedJobId = initalJobsHelper("Projects Loaded");
    }

    @Override
    void settingsEvaluated(Settings settings) {
    	initalJobsHelper("Settings Evaluated");
    }

    @Override
    void graphPopulated(TaskExecutionGraph graph) {
    	iGraphPopulatedJobId = initalJobsHelper("Graph Populated");
    }
    
    private final int initalJobsHelper(String aName){
    	int id = getNextJobId();
    	long ts = iUniversalTime.timeInMs;
    	// we can inject dependency on previous job because we know all these jobs are serial
		generateMiscJob(iLastEventCompletion, ts, aName, true, id, getThread(iLastEventCompletion, ts), generateDepList(id-1));
		return id;
    }

    @Override
    void afterEvaluate(Project project, ProjectState state) {
    	long invoked = iProjectTimestamps.get(project);
    	long completed = iUniversalTime.timeInMs;
    	int id = getNextJobId();
		generateMiscJob(invoked, completed, project.getPath()+": Project Evaluated", false, id, getThread(invoked, completed), generateDepList(iProjectsLoadedJobId));
    	// register dependencies to this parse job
    	Map<Project, Set<Task>> m = project.getAllTasks(true);
    	for(Project p : m.keySet()){
    		for(Task t : m.get(p)){
    			registerDependency(t, id);
    		}
    	}
    	iProjectEvalIds.add(id);
        iProjectTimestamps.remove(project);
		iLastEventCompletion = completed+1;
    }

    @Override
    void beforeEvaluate(Project project) {
		iProjectTimestamps.put(project, iUniversalTime.timeInMs+1);
    }


	private final void registerDependency(Task aTask, int aId){
		ArrayList<Integer> idList = iTaskDependencyLists.get(aTask);
		if(!idList){
			idList = new ArrayList<Integer>(2);
			iTaskDependencyLists.put(aTask, idList);
		}
		idList.add(aId);
	}

	private final String generateWaitingJobs(Project aProject){
		String anno = "<waitingJobs idList=\"";
    	Map<Project, Set<Task>> m = aProject.getAllTasks(true);
    	for(Project p : m.keySet()){
    		for(Task t : m.get(p)){
    			anno += (t.getEnabled())?(getJobIdSetIfNotExist(t)+" "):("");
    		}
    	}
    	anno = anno.trim()+"\"/>\n"
		return anno;
	}
	private final String generateDepList(int aJobId){
		String anno = "<depList>\n";
		anno += "\t<dep writejob=\"J"+aJobId+"\" file=\"J${aJobId}\"/>\n";
		anno += "</depList>\n";
		return anno;
	}
	private final String generateDepList(Task aTask){
		String anno = "<depList>\n";
		// we know all tasks that call this function depends on the graph-populated job-id
		anno += "\t<dep writejob=\"J${iGraphPopulatedJobId}\" file=\"J${iGraphPopulatedJobId}\"/>\n";
		if(iTaskDependencyLists.get(aTask)){
			for(int id : iTaskDependencyLists.get(aTask)){
				anno += "\t<dep writejob=\"J${id}\" file=\"J${id}\"/>\n";
			}
		}
		if(!aTask.getTaskDependencies().getDependencies(aTask).isEmpty()){
			for(Task t : aTask.getTaskDependencies().getDependencies(aTask)){
				int id = getJobIdSetIfNotExist(t);
				anno += "\t<dep writejob=\"J${id}\" file=\"J${id}\"/>\n";
			}
		}
		anno += "</depList>\n";
		return anno;
	}

	private final String generateOpList(Task aTask){
		String anno = "";
		if(aTask.getInputs().getHasInputs() || aTask.getOutputs().getHasOutput()){
// Added exception-handler due to below sometimes happen:
//	* What went wrong:
//	Failed to notify task execution listener.
//	> Failed to notify task execution listener.
//	   > Cannot infer Groovy class path because no Groovy Jar was found on class path: configuration ':docs:compile'
			try{
				anno += "<opList>\n";
				if(aTask.getInputs().getHasInputs()){
					for(File f : aTask.getInputs().getFiles()){
						anno += "\t<op type=\"read\" file=\""+f.getPath()+"\"/>\n";
					}
				}
				if(aTask.getOutputs().getHasOutput()){
					for(File f : aTask.getOutputs().getFiles()){
						anno += "\t<op type=\"create\" file=\""+f.getPath()+"\"/>\n";
					}
				}
				anno += "</opList>\n";
			}catch(Exception ex){
				//ex.printStackTrace();
			}
		}
		return anno;
	}

	private final String generateTaskCommandFailedAnno(Task aTask, String aCmd){
		TaskState taskState = aTask.getState();
		Throwable exception = taskState.getFailure();

		String anno = "<command line=\"1\">\n";
		anno += "\t<argv>${aCmd}</argv>\n";
		anno += "\t<output src=\"prog\">"+aTask.toString()+"\n";
		anno += "Result: ";
		anno += ((exception)?("FAILURE"):((taskState.getSkipped())?("SKIPPED"):((taskState.getDidWork()?("SUCCESS"):("DID NO WORK")))))+"\n\n";
		if(taskState.getSkipped()){
			anno += "Skip Message:\n  "+taskState.getSkipMessage()+"\n";		
		}
		else if(exception){
			anno += "Exception:\n  "+exception.toString()+"\n";
		}
		OutputListener outputListener = iTaskLogs.get(aTask);
		if(outputListener && outputListener.getLog().length()>0){
			anno += "\nLog:\n"+outputListener.getLog().replaceAll("<", "{{").replaceAll(">", "}}")+"\n";
		}
		anno += "</output>\n</command>\n";
		if(taskState.getFailure()){
			anno += "<failed code=\"1\"/>\n";
		}
		return anno;
	}

	private final void generateMiscJob(long aInvoked, long aCompleted, String aName, Boolean aUpdateLastEventCompletion, int aJobId){
		generateMiscJob(aInvoked, aCompleted, aName, aUpdateLastEventCompletion, aJobId, getThread(aInvoked, aCompleted));
	}
	private final void generateMiscJob(long aInvoked, long aCompleted, String aName, Boolean aUpdateLastEventCompletion, int aJobId, int aThread){
		generateMiscJob(aInvoked, aCompleted, aName, aUpdateLastEventCompletion, aJobId, aThread, "");
	}
	private final void generateMiscJob(long aInvoked, long aCompleted, String aName, Boolean aUpdateLastEventCompletion, int aJobId, int aThread, String aDepList){
		generateMiscJob(aInvoked, aCompleted, aName, aUpdateLastEventCompletion, aJobId, aThread, aDepList, "");	
	}
	private final void generateMiscJob(long aInvoked, long aCompleted, String aName, Boolean aUpdateLastEventCompletion, int aJobId, int aThread, String aDepList, String aOpList){
		generateMiscJob(aInvoked, aCompleted, aName, aUpdateLastEventCompletion, aJobId, aThread, aDepList, aOpList, "", "<command line=\"1\">\n<argv>echo</argv>\n</command>\n");
	}
	private final void generateMiscJob(long aInvoked, long aCompleted, String aName, Boolean aUpdateLastEventCompletion, int aJobId, int aThread, String aDepList, String aOpList, String aWaitingJobs, String aOutput){
		generateJob(aInvoked, aCompleted, "rule", aName, aUpdateLastEventCompletion, aJobId, aThread, aDepList, aOpList, aWaitingJobs, aOutput);
	}

	private final void generateJob(long aInvoked, long aCompleted, String aType, String aName, Boolean aUpdateLastEventCompletion){
		generateJob(aInvoked, aCompleted, aType, aName, aUpdateLastEventCompletion, getNextJobId(), getThread(aInvoked, aCompleted), "", "", "", "");
	}
	private final void generateJob(long aInvoked, long aCompleted, String aType, String aName, Boolean aUpdateLastEventCompletion, int aJobId, int aThread, String aDepList, String aOpList, String aWaitingJobs, String aOutput){
		String anno = new String();
	    // a job can not have a 0 ms runtime
	    if(aCompleted <= aInvoked){
	    	aCompleted = aInvoked+1;
	    }
        String invokedStr = String.format("%4f", aInvoked/1000.0);
        String completedStr = String.format("%4f", aCompleted/1000.0);
		anno += "<job id=\"J${aJobId}\" thread=\"\" type=\"${aType}\" name=\"${aName}\">\n";
		anno += aOutput
		anno += aDepList;
		anno += aOpList;
		anno += "<timing invoked=\"${invokedStr}\" completed=\"${completedStr}\" node=\"Gradle-Thread-${aThread}\"/>\n";
		anno += aWaitingJobs;
		anno += "</job>\n";
		writeAnno(anno);
		if(aUpdateLastEventCompletion){
			iLastEventCompletion = aCompleted+1;
		}
	}

	private final int acquireThread(long aInvoked){
		int index=-1;
		int i=0;
		long lowestCompletionTime=Long.MAX_VALUE;
		synchronized(iThreadLock){
			for(long l : iGradleThreads){	
				if(l!=BUSY_THREAD && l<aInvoked){
					if(l<lowestCompletionTime){
						index = i;
						lowestCompletionTime = l;					
						break;
					}
				}
				i++;
			}
			if(index==-1){
				index = i;
			}
			if(index < iGradleThreads.size()){
				iGradleThreads.set(index, BUSY_THREAD);
			}
			else{
				iGradleThreads.add(BUSY_THREAD);
			}
		}
		return index;
	}
	private final int releaseThread(int aThreadIndex, long aCompleted){
		synchronized(iThreadLock){
			if(iGradleThreads.get(aThreadIndex) != BUSY_THREAD){
				throw new Exception("Thread "+aThreadIndex+" is not busy");
			}
			iGradleThreads.set(aThreadIndex, aCompleted);
		}
		return aThreadIndex;
	}
	private final int getThread(long aInvoked, long aCompleted){
		return releaseThread(acquireThread(aInvoked), aCompleted);
	}
	private final void acquireThread(Task aTask, long aInvoked){
		synchronized(iThreadLock){
			iTaskThreads.put(aTask, acquireThread(aInvoked));
		}
	}
	private final int releaseThread(Task aTask, long aCompleted){
		synchronized(iThreadLock){
			return releaseThread(iTaskThreads.remove(aTask), aCompleted);
		}
	}
	private final int getThread(Task aTask){
		synchronized(iThreadLock){
			return iTaskThreads.get(aTask);
		}
	}
	
	private final void writeAnno(String aAnno){
		synchronized(iWriteLock){
			iWriter.write(aAnno);
			iWriter.flush();
		}
	}    

	private final int getNextJobId(){
		return iIdAtomicCounter.getAndIncrement();
	}
	private final void setJobId(Task aTask){
		iTaskIds.put(aTask, getNextJobId());
	}
	private final int getJobId(Task aTask){
		if(!iTaskIds.containsKey(aTask)){
			throw new Exception("Task "+aTask+" does not have id!");
		}
		return iTaskIds.get(aTask);
	}
	private final int setAndGetJobId(Task aTask){
		setJobId(aTask);
		return getJobId(aTask);
	}
	private final int getAndSetJobId(Task aTask){
		int id = getJobId(aTask);
		setJobId(aTask);
		return id;
	}
	private final int getJobIdSetIfNotExist(Task aTask){
		int id;
		try{
			id = getJobId(aTask);
		}
		catch(Exception e){
			id = setAndGetJobId(aTask);
		}
		return id;
	}
}

gradle.addListener new ExecutionListener(gUniversalTime, gWriter);

